/**
 * @file Overview
 * This ruleset enforces a role-based access control model where only authenticated users
 * can access specific collections based on their role.
 *
 * Data Structure:
 * - /storeConfig/main: Singleton document containing store configuration.
 * - /parts/{partId}: Collection of auto parts.
 * - /employees/{employeeId}: Collection of employee information.
 * - /customers/{customerId}: Collection of customer information.
 * - /sales/{saleId}: Collection of sale transactions.
 * - /sales/{saleId}/saleItems/{saleItemId}: Subcollection of items within a sale.
 *
 * Key Security Decisions:
 * - Employees are not owned by users; access is likely managed through roles.
 * - Public listing of employees is denied due to privacy concerns.
 *
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Store configuration is stored in a singleton document for easy access.
     * @path /storeConfig/main
     * @allow get: if isSignedIn();
     * @allow list: if false;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Allows authenticated users to read the store configuration.
     */
    match /storeConfig/main {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Parts are stored in a top-level collection.
     * @path /parts/{partId}
     * @allow get: if isSignedIn();
     * @allow list: if isSignedIn();
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Allows any signed-in user to read all parts.
     */
    match /parts/{partId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Employees are stored in a top-level collection.
     * @path /employees/{employeeId}
     * @allow get: if isSignedIn();
     * @allow list: if false;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny list: if true;
     * @principle Prevents listing all employees for privacy reasons.
     */
    match /employees/{employeeId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Customers are stored in a top-level collection.
     * @path /customers/{customerId}
     * @allow get: if isSignedIn();
     * @allow list: if isSignedIn();
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Allows any signed-in user to read customer information.
     */
    match /customers/{customerId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Sales are stored in a top-level collection.
     * @path /sales/{saleId}
     * @allow get: if isSignedIn();
     * @allow list: if isSignedIn();
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     */
    match /sales/{saleId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;

      /**
       * @description SaleItems are stored as subcollections under each sale document.
       * @path /sales/{saleId}/saleItems/{saleItemId}
       * @allow get: if isSignedIn();
       * @allow list: if isSignedIn();
       * @allow create: if false;
       * @allow update: if false;
       * @allow delete: if false;
       */
      match /saleItems/{saleItemId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if false;
        allow update: if false;
        allow delete: if false;
      }
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}