/**
 * @file Firebase Security Rules for AutoParts Manager
 *
 * @core_philosophy This ruleset provides a baseline security configuration for the AutoParts Manager application.
 *  It focuses on restricting data access based on a combination of user authentication and a separation of concerns across
 *  different data entities. It does NOT enforce strict data validation rules to allow for rapid prototyping.
 *
 * @data_structure The Firestore database is structured with top-level collections for 'parts', 'employees', 'customers', and 'sales'.
 *  SaleItems are stored as subcollections under each 'sale' document. A singleton document 'storeConfig/main' stores
 *  store-wide configurations.
 *
 * @key_security_decisions
 *  - Listing of employees and customers is disallowed to prevent accidental exposure of personal data.
 *  - The 'storeConfig' document is only writable.
 *  - Write operations are generally restricted to authenticated users, with the assumption that more granular role-based
 *    access control will be implemented in the application code and reflected in future rule iterations.
 *  - No data validation is performed in this initial ruleset, except for ownership checks where applicable and validating
 *  the existence of a document being updated or deleted.
 *
 * @denormalization_for_authorization N/A - Authorization is primarily based on authentication and path-based ownership and thus does not require denormalization.
 *
 * @structural_segregation Data is segregated by entity type into separate collections, which simplifies security rules
 * and improves query performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages store-wide configurations. Limited write access.
     * @path /storeConfig/main
     * @allow (create) Signed-in user can create the document.
     * @deny (create) Anonymous user tries to create the document.
     * @principle Requires user authentication for writes.
     */
    match /storeConfig/main {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages auto parts inventory. Requires authentication for all write operations.
     * @path /parts/{partId}
     * @allow (get,list) Any user can read part information.
     * @allow (create, update, delete) Signed-in user can modify part information.
     * @deny (create, update, delete) Anonymous user tries to modify part information.
     * @principle Requires user authentication for writes.
     */
    match /parts/{partId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages employee information. Requires authentication for all write operations. Listing is denied.
     * @path /employees/{employeeId}
     * @allow (get) Any user can read employee information.
     * @deny (list) Listing is disallowed to prevent data exposure.
     * @allow (create, update, delete) Signed-in user can modify employee information.
     * @deny (create, update, delete) Anonymous user tries to modify employee information.
     * @principle Requires user authentication for writes and restricts listing.
     */
    match /employees/{employeeId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages customer information. Requires authentication for all write operations. Listing is denied.
     * @path /customers/{customerId}
     * @allow (get) Any user can read customer information.
     * @deny (list) Listing is disallowed to prevent data exposure.
     * @allow (create, update, delete) Signed-in user can modify customer information.
     * @deny (create, update, delete) Anonymous user tries to modify customer information.
     * @principle Requires user authentication for writes and restricts listing.
     */
    match /customers/{customerId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages sale transaction information. Requires authentication for all write operations.
     * @path /sales/{saleId}
     * @allow (get,list) Any user can read sale information.
     * @allow (create, update, delete) Signed-in user can modify sale information.
     * @deny (create, update, delete) Anonymous user tries to modify sale information.
     * @principle Requires user authentication for writes.
     */
    match /sales/{saleId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages items within a sale transaction. Requires authentication for all write operations.
     * @path /sales/{saleId}/saleItems/{saleItemId}
     * @allow (get,list) Any user can read sale item information.
     * @allow (create, update, delete) Signed-in user can modify sale item information.
     * @deny (create, update, delete) Anonymous user tries to modify sale item information.
     * @principle Requires user authentication for writes.
     */
    match /sales/{saleId}/saleItems/{saleItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }

  // Helper function to determine if a user is signed in
  function isSignedIn() {
    return request.auth != null;
  }
}