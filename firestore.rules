/**
 * @file Firestore Security Rules for AutoParts Manager
 * @version Prototyping
 *
 * @description This ruleset enforces a role-based access control model, with public read access to store configuration and owner-only access to parts, employees, customers, sales, and sale items.
 *
 * @dataStructure
 * - /storeConfig/main: Singleton document containing store-wide configuration.
 * - /parts/{partId}: Collection of auto parts.
 * - /employees/{employeeId}: Collection of employee records.
 * - /customers/{customerId}: Collection of customer records.
 * - /sales/{saleId}: Collection of sales transactions.
 * - /sales/{saleId}/saleItems/{saleItemId}: Subcollection of items within a specific sale.
 *
 * @keySecurityDecisions
 * - Store configuration is publicly readable.
 * - Parts, employees and customers are only writable by authenticated users.
 * - Listing of parts, employees, customers, sales, and saleItems is only allowed by authenticated users.
 * - The ruleset does not enforce any data validation (beyond requiring authentication for writes).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read the store configuration, but prevents writing.
     * @path /storeConfig/main
     * @allow (get, list) Public access to store configuration.
     * @deny (create, update, delete) No one can modify store configuration.
     * @principle Allows public read access for store configuration.
     */
    match /storeConfig/main {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages auto parts.  Allows authenticated users to create, read, update and delete parts.
     * @path /parts/{partId}
     * @allow (create) Authenticated user can create a new part.
     * @allow (get, list) Authenticated user can read part data.
     * @allow (update, delete) Authenticated user can update/delete a part if it exists.
     * @deny (create, update, delete) Unauthorized users cannot modify parts.
     * @principle Requires authentication for all write operations on parts data.
     */
    match /parts/{partId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages employee records.  Allows authenticated users to create, read, update and delete employee information.
     * @path /employees/{employeeId}
     * @allow (create) Authenticated user can create a new employee.
     * @allow (get, list) Authenticated user can read employee data.
     * @allow (update, delete) Authenticated user can update/delete an employee if it exists.
     * @deny (create, update, delete) Unauthorized users cannot modify employee data.
     * @principle Requires authentication for all write operations on employee data.
     */
    match /employees/{employeeId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages customer records.  Allows authenticated users to create, read, update and delete customer information.
     * @path /customers/{customerId}
     * @allow (create) Authenticated user can create a new customer.
     * @allow (get, list) Authenticated user can read customer data.
     * @allow (update, delete) Authenticated user can update/delete a customer if it exists.
     * @deny (create, update, delete) Unauthorized users cannot modify customer data.
     * @principle Requires authentication for all write operations on customer data.
     */
    match /customers/{customerId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages sales transactions.  Allows authenticated users to create, read, update and delete sales.
     * @path /sales/{saleId}
     * @allow (create) Authenticated user can create a new sale.
     * @allow (get, list) Authenticated user can read sale data.
     * @allow (update, delete) Authenticated user can update/delete a sale if it exists.
     * @deny (create, update, delete) Unauthorized users cannot modify sale data.
     * @principle Requires authentication for all write operations on sales data.
     */
    match /sales/{saleId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages sale items within a sale transaction.  Allows authenticated users to create, read, update and delete sale items.
     * @path /sales/{saleId}/saleItems/{saleItemId}
     * @allow (create) Authenticated user can create a new sale item.
     * @allow (get, list) Authenticated user can read sale item data.
     * @allow (update, delete) Authenticated user can update/delete a sale item if it exists.
     * @deny (create, update, delete) Unauthorized users cannot modify sale item data.
     * @principle Requires authentication for all write operations on sale items data.
     */
    match /sales/{saleId}/saleItems/{saleItemId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}