/**
 * @description This ruleset enforces a strict owner-only access model for most collections,
 *              with public read access to the 'storeConfig' collection.
 * @dataStructure
 *  - /storeConfig/main: Singleton document containing store configuration. Publicly readable.
 *  - /parts/{partId}: Collection of auto parts. Write-protected.
 *  - /employees/{employeeId}: Collection of employee records. Write-protected.
 *  - /customers/{customerId}: Collection of customer records. Write-protected.
 *  - /sales/{saleId}: Collection of sales transactions. Write-protected.
 *  - /sales/{saleId}/saleItems/{saleItemId}: Subcollection of sale items for each sale. Write-protected.
 * @keySecurityDecisions
 *  - No user listing is allowed for employees, customers, or parts collections.
 *  - All write operations are protected by authorization checks.
 *  - Read access to /storeConfig/main is public.
 * @denormalizationForAuthorization Not applicable in this ruleset.
 * @structuralSegregation Data is segregated by entity type into separate collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read the store configuration, but no one can write to it.
     * @path /storeConfig/main
     * @allow (get, list) Authenticated and unauthenticated users can read store config.
     * @deny (create, update, delete) No one can create, update, or delete the store config.
     * @principle Public read access with no write access.
     */
    match /storeConfig/{document} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Denies all access to the parts collection.
     * @path /parts/{partId}
     * @allow None.
     * @deny (create, get, list, update, delete) All operations are denied.
     * @principle Data is not intended to be directly accessed through the client.
     */
    match /parts/{partId} {
      allow read: if false;
      allow write: if false;
    }

    /**
     * @description Denies all access to the employees collection.
     * @path /employees/{employeeId}
     * @allow None.
     * @deny (create, get, list, update, delete) All operations are denied.
     * @principle Data is not intended to be directly accessed through the client.
     */
    match /employees/{employeeId} {
      allow read: if false;
      allow write: if false;
    }

    /**
     * @description Denies all access to the customers collection.
     * @path /customers/{customerId}
     * @allow None.
     * @deny (create, get, list, update, delete) All operations are denied.
     * @principle Data is not intended to be directly accessed through the client.
     */
    match /customers/{customerId} {
      allow read: if false;
      allow write: if false;
    }

    /**
     * @description Denies all access to the sales collection.
     * @path /sales/{saleId}
     * @allow None.
     * @deny (create, get, list, update, delete) All operations are denied.
     * @principle Data is not intended to be directly accessed through the client.
     */
    match /sales/{saleId} {
      allow read: if false;
      allow write: if false;
    }

    /**
     * @description Denies all access to the saleItems subcollection.
     * @path /sales/{saleId}/saleItems/{saleItemId}
     * @allow None.
     * @deny (create, get, list, update, delete) All operations are denied.
     * @principle Data is not intended to be directly accessed through the client.
     */
    match /sales/{saleId}/saleItems/{saleItemId} {
      allow read: if false;
      allow write: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}