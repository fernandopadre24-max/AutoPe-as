/**
 * @fileOverview Firestore Security Rules for AutoParts Manager.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and data access control for the AutoParts Manager application.
 * It adopts a strict, explicit approach to permissions, ensuring that each data access operation
 * is explicitly authorized. The primary goal is to prevent unauthorized data access and modification
 * while providing flexibility for application development.
 *
 * Data Structure:
 * - `/storeConfig/main`: Singleton document storing global store configuration.
 * - `/parts/{partId}`: Collection of auto parts.
 * - `/employees/{employeeId}`: Collection of employee records.
 * - `/customers/{customerId}`: Collection of customer records.
 * - `/sales/{saleId}`: Collection of sales transactions.
 * - `/sales/{saleId}/saleItems/{saleItemId}`: Subcollection of items within a sale.
 *
 * Key Security Decisions:
 * - **No User Listing**: Listing of users (employees or customers) is explicitly denied for security reasons.
 * - **Store Config**: Store configuration is publicly readable but only writable with appropriate role. (TODO: Define role).
 * - **Path-based Ownership**: Relationships between documents are validated via path parameters and document fields.
 * - **No `get()` calls**: Rules are designed to avoid `get()` calls for authorization. All necessary data for authorization must be present in the `request.auth` context or within the document itself.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the store configuration.
     * @path /storeConfig/main
     * @allow (get, list): Anyone can read the store configuration.
     * @allow (create, update, delete): Only authenticated users with specific role can modify the store configuration. (TODO: Define role).
     * @deny (create, update, delete): Unauthorized users cannot modify the store configuration.
     * @principle Public read, restricted write based on role (TODO).
     */
    match /storeConfig/main {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: implement admin role to write the store config
    }

    /**
     * @description Controls access to auto part documents.
     * @path /parts/{partId}
     * @allow get, list: if true;
     * @allow create: if false; // TODO: implement admin role to create a part
     * @allow update: if false; // TODO: implement admin role to update a part
     * @allow delete: if false; // TODO: implement admin role to delete a part
     * @principle Public read, restricted write based on role (TODO).
     */
    match /parts/{partId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: implement admin role to write the part
    }

    /**
     * @description Controls access to employee documents.
     * @path /employees/{employeeId}
     * @allow get: if false;
     * @allow list: if false;
     * @allow create: if false; // TODO: implement admin role to create an employee
     * @allow update: if false; // TODO: implement admin role to update an employee
     * @allow delete: if false; // TODO: implement admin role to delete an employee
     * @principle No listing or read access. Write operations requires a role (TODO).
     */
    match /employees/{employeeId} {
      allow get: if false;
      allow list: if false;
      allow create, update, delete: if false; // TODO: implement admin role to write the employee
    }

    /**
     * @description Controls access to customer documents.
     * @path /customers/{customerId}
     * @allow get: if false;
     * @allow list: if false;
     * @allow create: if false; // TODO: implement admin role to create a customer
     * @allow update: if false; // TODO: implement admin role to update a customer
     * @allow delete: if false; // TODO: implement admin role to delete a customer
     * @principle No listing or read access. Write operations requires a role (TODO).
     */
    match /customers/{customerId} {
      allow get: if false;
      allow list: if false;
      allow create, update, delete: if false; // TODO: implement admin role to write the customer
    }

    /**
     * @description Controls access to sale documents.
     * @path /sales/{saleId}
     * @allow get, list: if false;
     * @allow create: if false; // TODO: implement admin/employee role to create a sale
     * @allow update: if false; // TODO: implement admin/employee role to update a sale
     * @allow delete: if false; // TODO: implement admin/employee role to delete a sale
     * @principle Restricted access. Write operations requires a role (TODO).
     */
    match /sales/{saleId} {
      allow get, list: if false;
      allow create, update, delete: if false; // TODO: implement admin/employee role to write the sale
    }

    /**
     * @description Controls access to sale item documents.
     * @path /sales/{saleId}/saleItems/{saleItemId}
     * @allow get, list: if false;
     * @allow create: if false; // TODO: implement admin/employee role to create a saleItem
     * @allow update: if false; // TODO: implement admin/employee role to update a saleItem
     * @allow delete: if false; // TODO: implement admin/employee role to delete a saleItem
     * @principle Restricted access. Write operations requires a role (TODO).
     */
    match /sales/{saleId}/saleItems/{saleItemId} {
      allow get, list: if false;
      allow create, update, delete: if false; // TODO: implement admin/employee role to write the saleItem
    }
  }
}