/**
 * @fileOverview Firestore Security Rules for AutoParts Manager.
 *
 * Core Philosophy:
 * This ruleset prioritizes security through explicit authorization checks, focusing on protecting data based on user roles.
 * It avoids complex data validation in favor of rapid prototyping.
 *
 * Data Structure:
 * - /storeConfig/main: Singleton document for store configuration.
 * - /parts/{partId}: Collection of auto parts.
 * - /employees/{employeeId}: Collection of employee data.
 * - /customers/{customerId}: Collection of customer data.
 * - /sales/{saleId}: Collection of sales transactions.
 * - /sales/{saleId}/saleItems/{saleItemId}: Subcollection of items within a sale.
 *
 * Key Security Decisions:
 * - No public listing of employees, customers, or sales.
 * - Authorization Independence: Rules avoid get() calls by relying on request.auth and pre-existing data on the document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants read-only access to the store configuration.
     * @path /storeConfig/main
     * @allow get, list: if true
     * @deny create, update, delete: if false
     * @principle Public read-only access for store configuration.
     */
    match /storeConfig/main {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages access to auto parts.
     * @path /parts/{partId}
     * @allow get, list: if true
     * @allow create: if isSignedIn()
     * @allow update: if isSignedIn() && resource != null
     * @allow delete: if isSignedIn() && resource != null
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes for parts.
     */
    match /parts/{partId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to employee data.
     * @path /employees/{employeeId}
     * @deny get, list, create, update, delete: if true
     * @principle No access to employee data.
     */
    match /employees/{employeeId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Manages access to customer data.
     * @path /customers/{customerId}
     * @deny get, list, create, update, delete: if true
     * @principle No access to customer data.
     */
    match /customers/{customerId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Manages access to sales transactions.
     * @path /sales/{saleId}
     * @deny get, list, create, update, delete: if true
     * @principle No access to sales data.
     */
    match /sales/{saleId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Manages access to sale items within a sale.
     * @path /sales/{saleId}/saleItems/{saleItemId}
     * @deny get, list, create, update, delete: if true
     * @principle No access to sale items.
     */
    match /sales/{saleId}/saleItems/{saleItemId} {
      allow get, list, create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}