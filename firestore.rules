/**
 * @fileOverview Firestore Security Rules for AutoParts Manager.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model. Only authenticated
 * users can access data, and specific roles are required for certain
 * operations. Employee documents require authentication for listing.
 *
 * Data Structure:
 * - /storeConfig/main: Singleton document containing store configuration.
 * - /parts/{partId}: Collection of auto parts.
 * - /employees/{employeeId}: Collection of employee information.
 * - /customers/{customerId}: Collection of customer information.
 * - /sales/{saleId}: Collection of sale transactions.
 * - /sales/{saleId}/saleItems/{saleItemId}: Subcollection of sale items for each sale.
 *
 * Key Security Decisions:
 * - Listing of employee documents is only permitted to authenticated users.
 *
 *
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants read-only access to the store configuration for all authenticated users.
     * @path /storeConfig/main
     * @allow get, list: if isSignedIn();
     * @deny create, update, delete: if true;
     * @principle Allows any signed-in user to read store config, but prevents any writes.
     */
    match /storeConfig/main {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Grants read-only access to parts for all authenticated users.
     * @path /parts/{partId}
     * @allow get, list: if isSignedIn();
     * @deny create, update, delete: if true;
     * @principle Allows any signed-in user to read part information, but prevents any writes.
     */
    match /parts/{partId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Only allow listing employees when authenticated.
     * @path /employees/{employeeId}
     * @allow get: if isSignedIn();
     * @allow list: if isSignedIn();
     * @deny create, update, delete: if true;
     * @principle Requires authentication for any access to employee information.
     */
    match /employees/{employeeId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Grants read-only access to customer information for all authenticated users.
     * @path /customers/{customerId}
     * @allow get, list: if isSignedIn();
     * @deny create, update, delete: if true;
     * @principle Allows any signed-in user to read customer data, but prevents any writes.
     */
    match /customers/{customerId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Grants read-only access to sales information for all authenticated users.
     * @path /sales/{saleId}
     * @allow get, list: if isSignedIn();
     * @deny create, update, delete: if true;
     * @principle Allows any signed-in user to read sales data, but prevents any writes.
     */
    match /sales/{saleId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Grants read-only access to sale items for all authenticated users.
     * @path /sales/{saleId}/saleItems/{saleItemId}
     * @allow get, list: if isSignedIn();
     * @deny create, update, delete: if true;
     * @principle Allows any signed-in user to read sale items, but prevents any writes.
     */
    match /sales/{saleId}/saleItems/{saleItemId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

  }

  // Helper function to determine if a user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }
}